<?php
namespace ARM\Payments;

if (!defined('ABSPATH')) exit;

/**
 * PayPal Orders v2 integration (Server-side, cURL).
 * Endpoints:
 *  - POST /wp-json/arm/v1/paypal/order   {invoice_id} -> {id}
 *  - POST /wp-json/arm/v1/paypal/capture {order_id}   -> {status}
 */
class PayPalController {

    public static function settings_fields() {
        register_setting('arm_re_settings','arm_re_paypal_env',      ['type'=>'string','sanitize_callback'=>function($v){ $v=sanitize_text_field($v); return in_array($v,['sandbox','live'],true)?$v:'sandbox'; }]);
        register_setting('arm_re_settings','arm_re_paypal_client_id',['type'=>'string','sanitize_callback'=>'sanitize_text_field']);
        register_setting('arm_re_settings','arm_re_paypal_secret',   ['type'=>'string','sanitize_callback'=>'sanitize_text_field']);
    }

    public static function boot() {
        add_action('rest_api_init', function(){
            register_rest_route('arm/v1', '/paypal/order', [
                'methods'  => 'POST',
                'callback' => [__CLASS__, 'rest_create_order'],
                'permission_callback' => '__return_true',
            ]);
            register_rest_route('arm/v1', '/paypal/capture', [
                'methods'  => 'POST',
                'callback' => [__CLASS__, 'rest_capture_order'],
                'permission_callback' => '__return_true',
            ]);
        });
    }

    /** Create PayPal order for an invoice */
    public static function rest_create_order(\WP_REST_Request $req) {
        $invoice_id = (int)$req->get_param('invoice_id');
        if (!$invoice_id) return new \WP_REST_Response(['error'=>'invoice_id required'], 400);

        global $wpdb;
        $iT = $wpdb->prefix.'arm_invoices';
        $inv = $wpdb->get_row($wpdb->prepare("SELECT * FROM $iT WHERE id=%d", $invoice_id));
        if (!$inv) return new \WP_REST_Response(['error'=>'Invoice not found'], 404);
        if ($inv->status === 'PAID') return new \WP_REST_Response(['error'=>'Invoice already paid'], 409);

        $amount = number_format((float)$inv->total, 2, '.', '');
        $currency = strtoupper(get_option('arm_re_currency','USD'));

        $token = self::oauth_token();
        if (!$token) return new \WP_REST_Response(['error'=>'PayPal not configured'], 500);

        $endpoint = self::base().'/v2/checkout/orders';
        $payload = [
            'intent' => 'CAPTURE',
            'purchase_units' => [[
                'reference_id' => (string)$inv->id,
                'description'  => sprintf('Invoice %s', $inv->invoice_no),
                'amount' => ['currency_code'=>$currency, 'value'=>$amount]
            ]]
        ];
        $resp = self::http('POST', $endpoint, $payload, ['Authorization: Bearer '.$token, 'Content-Type: application/json']);
        if (empty($resp['id'])) return new \WP_REST_Response(['error'=>'PayPal error','detail'=>$resp], 502);
        return new \WP_REST_Response(['id'=>$resp['id']], 200);
    }

    /** Capture a PayPal order and mark invoice PAID */
    public static function rest_capture_order(\WP_REST_Request $req) {
        $order_id = sanitize_text_field($req->get_param('order_id'));
        if (!$order_id) return new \WP_REST_Response(['error'=>'order_id required'], 400);

        $token = self::oauth_token();
        if (!$token) return new \WP_REST_Response(['error'=>'PayPal not configured'], 500);

        $endpoint = self::base().'/v2/checkout/orders/'.$order_id.'/capture';
        $resp = self::http('POST', $endpoint, (object)[], ['Authorization: Bearer '.$token, 'Content-Type: application/json']);

        
        if (!empty($resp['status']) && $resp['status'] === 'COMPLETED') {
            
            $ref = null;
            if (!empty($resp['purchase_units'][0]['reference_id'])) $ref = (int)$resp['purchase_units'][0]['reference_id'];
            if ($ref) {
                global $wpdb; $iT = $wpdb->prefix.'arm_invoices';
                $wpdb->update($iT, ['status'=>'PAID','updated_at'=>current_time('mysql')], ['id'=>$ref]);
            }
            return new \WP_REST_Response(['status'=>'PAID'], 200);
        }
        return new \WP_REST_Response(['error'=>'capture_failed','detail'=>$resp], 502);
    }

    /** --------------------------- Helpers -------------------------- */

    private static function env() { return get_option('arm_re_paypal_env','sandbox') === 'live' ? 'live' : 'sandbox'; }
    private static function base() {
        return self::env()==='live' ? 'https://api-m.paypal.com' : 'https://api-m.sandbox.paypal.com';
    }

    private static function oauth_token() {
        $cid = trim(get_option('arm_re_paypal_client_id',''));
        $sec = trim(get_option('arm_re_paypal_secret',''));
        if (!$cid || !$sec) return null;

        $endpoint = self::base().'/v1/oauth2/token';
        $headers = ['Authorization: Basic '.base64_encode($cid.':'.$sec), 'Content-Type: application/x-www-form-urlencoded'];
        $resp = self::http('POST', $endpoint, 'grant_type=client_credentials', $headers, true);
        return !empty($resp['access_token']) ? $resp['access_token'] : null;
    }

    /**
     * @param string $method
     * @param string $url
     * @param array|string|object $body
     * @param array $headers
     * @param bool $raw_body When true, $body is sent as-is (for form-encoded).
     * @return array
     */
    private static function http($method, $url, $body = [], array $headers = [], $raw_body = false) {
        $ch = curl_init($url);
        $opts = [
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_CUSTOMREQUEST  => strtoupper($method),
            CURLOPT_HTTPHEADER     => $headers,
            CURLOPT_TIMEOUT        => 20,
        ];
        if ($method === 'POST' || $method === 'PATCH') {
            if ($raw_body) {
                $opts[CURLOPT_POSTFIELDS] = is_string($body) ? $body : '';
            } else {
                if (is_array($body) || is_object($body)) {
                    $opts[CURLOPT_POSTFIELDS] = json_encode($body);
                } else {
                    $opts[CURLOPT_POSTFIELDS] = (string)$body;
                }
            }
        }
        curl_setopt_array($ch, $opts);
        $out = curl_exec($ch);
        $err = curl_error($ch);
        curl_close($ch);
        if ($err) return ['error'=>$err];
        $json = json_decode($out, true);
        return is_array($json) ? $json : ['raw'=>$out];
    }
}
